{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Redovisning</h1>

    <h2 id="kmom01">kmom01</h2>
    <p>Jag har tidigare erfarenhet av objektorienterad programmering inom C#, Python och JavaScript. 
    Därför blir det något helt nytt att göra det i PHP för min del. Jag hoppas att man kan se vissa likheter 
    mellan hur man gör i PHP och till exempel JavaScript.</p>
    <p>Objekt är instanser av en klass. Objekt som skapas är mutable och kan därför förändras efter att 
    de är skapade. I PHP används operatorn "->" för att komma åt ett objekts properties och metoder.</p>
    <p>Än så länge är koden för uppgiften ganska simpel. Jag antar att den kommer bli mer komplicerad 
    desto djupare in i kursen vi går. Än så länge tycker jag koden är lik den vi JavaScript-kod vi hade i databas-kursen.</p>
    <p>Jag skummade fort igenom artikeln "PHP The Right Way". En av de viktigaste delarna tror jag är Coding 
    Practices. Där står det bland annat om designmönster och teckenkodning. Utöver det finns information om 
    hur PHP kan användas med databaser och templating.</p>
    <p>Min TIL denna vecka är man kan använda sig av Twig på fler sätt än vad jag visste om. Jag visste 
    inte att man kunde skapa block i Twig. Förut när jag använd Twig-filer så har jag lagt HTML-element 
    direkt. Utöver det har jag även lärt mig andra saker såklart, som några grunder inom objektorienterad programmering i PHP.</p>

    <h2 id="kmom02">kmom02</h2>
    <p>Denna vecka har vi gjort flera egna klasser. I objektorienterad programmering i PHP finns en del konstruktioner och 
    begrepp man bör känna till, bland annat arv, komposition, interface och trait. Arv används när man vill göra en specialiserad 
    version av en klass. Det används även ofta när det finns en speciell hierarki bland klasser. Ett exempel av det är att 
    klasserna Teacher och Student ärver från Person-klassen. Komposition är när en klass består av en annan klass där 
    komponenten inte kan existera utan ägaren. Ett exempel av det är mina CardGraphic som skapas inuti konstruktorn för 
    DeckOfCards. En interface fungerar som en lista med metoder som måste implementeras. När man sedan skapar en ny klass 
    kan man ange att den implementerar en interface. Det verkar ganska likt abstrakta klasser som vi pratat en del om i 
    kursen om objektorienterad Python. Traits används när man vill dela kod mellan klasser som inte har en hierarkisk 
    relation. En trait är en samling av metoder.</p>
    <p>Jag har inga speciella känslor för min implementation av uppgiften. Det är väl mest skönt att äntligen vara klar 
    med uppgiften. Jag tyckte uppgiften var för stor, plus att kursmomentet var under flera röda dagar, plus att jag 
    varit sjuk. Min implementation verkar funka som den ska så det är ju bra iallafall. Min styling blev inte så bra, 
    delvis för jag inte visste var jag skulle placera navbar på sidan för card och API/JSON. I efterhand har jag även 
    tänkt på att jag nog borde låtit alla klass-attribut vara protected eller privata och använt mig av get och set-metoder 
    för att nå och ändra värdena. Jag är dock inte säker på vad som är "best practice" när det gäller det i PHP då det 
    fortfarande är relativt nytt för mig.</p>
    <p>Att göra klassdiagram gick ganska bra. Jag gjorde en variant först men insåg att det inte stämde. Sen gjorde jag om 
    den, sparade och la in den på hemsidan och märkte att det inte stämde heller. Sen gjorde jag en sista variant, jag 
    hoppas att den stämmer. Jag är lite osäker på vissa relationer mellan olika klasser men annars så känns det bra.</p>
    <p>Min TIL denna vecka är att man använder "->" istället för "." som operator mellan objekt och dess metod eller 
    attribut. Det är något jag gjort fel minst 20 gånger detta kursmoment så jag hoppas jag kommer ihåg det nu. Jag har 
    även lärt mig att man tydligen kan spara egna objekt/klasser i session. Det var något man inte kunde göra i Flask i 
    Python. Jag lärde mig inte det förens efteråt dock så jag löste det genom att spara olika värden i en array i session 
    och sedan använda den som argument till en metod på min DeckOfCards för att återskapa kortleken.</p>

    <h2 id="kmom03">kmom03</h2>
    <p>Detta kursmoment har det handlat om att fortsätta i Symfony i PHP och skapa ett kortspel. Jag tyckte det var ganska 
    svårt att skapa flödesdiagram och pseudokod för uppgiften, delvis för att jag knappt gjort det innan. Däremot tyckte 
    jag att det var väldigt skönt att kunna använda de som hjälpmedel sen när jag började programmera spelet på riktigt. 
    Kortspelet jag gjorde var Tjugoett (som även rekommenderades). Jag gjorde några få ändringar och egna tolkningar när 
    jag tyckte reglerna var otydliga.</p>
    <p>Jag löste uppgiften genom att skapa en klass som jag döpte till CardGame21. Den klassen har attribut för spelarens 
    och bankirens CardHand-objekt, ett DeckOfCards-objekt, samt varsin bool som avgör ifall spelaren och bankiren har 
    stannat/nöjt sig. Med hjälp av dessa attribut kan jag styra vems tur det är. Med hjälp av decideWinner-metoden kan jag 
    visa upp i vyn vem som vunnit när både spelaren och bankirer har nöjt sig. Jag skapade fyra routes (om man räknar utan API/JSON), 
    det första är routen "game_play" där spelet tar plats, det andra är för att dra ett kort och sedan redirect till "game_play" 
    (även samma route för att låta datorn dra sina kort då jag anropar play-metoden i CardGame21-klassen och den där inne 
    hanterar vems tur det är). Min tredje route är för att spelaren ska kunna ange sig nöjd, sen blir det redirect till 
    "game_play". Fjärde routen är för att ta bort session-variabel och redirect för att kunna starta om spelet.</p>
    <p>Utöver den klassen byggde jag vidare på min CardHand-klass med en metod som returnerade antalet poäng korten i handen 
    är värda. Den metoden hanterade även essets "dynamiska" värde, alltså ifall ett ess ska vara värt 1 eller 14. Jag tyckte 
    reglerna var lite otydliga när det gällde ess, så jag gjorde bara att ifall man börjar med att dra ett ess så är handen 
    14. Om man sedan drar en kung, så blir esset 1 eftersom handen är värd mer än 21. Alltså blir handen då 1 + 13 = 14, 
    istället för 14 + 13 = 27. I min variant börjar alltså essen alltid som 14 men ändrar värde till 1 automatiskt när det 
    passar innehavaren. Jag hade kunnat göra istället så att spelaren fick välja om esset ska vara 1 eller 14 när kortet 
    dras, men jag var lite osäker som sagt och gjorde en egen tolkning. Jag är faktiskt väldigt nöjd med allt inom min 
    implementation förutom styling, det kunde gärna sett lite roligare/finare ut men det är som det är.</p>
    <p>Jag tycker det känns bra att programmera i Symfony. Det känns väldigt likt det jag fick göra i Flask i senaste 
    Python-kursen. PHP är inte min favorit precis när det kommer till programmeringsspråk men detta kursmoment har gått 
    väldigt bra faktiskt, så det känns lite bättre nu iallafall.</p>
    <p>Min TIL detta kursmoment är hur man skapar flödesdiagram och pseudokod, tidigare jag hade inte koll på 
    rekommenderad stil av pseudokod. Nu känner jag att jag blivit lite bättre på de sakerna iallafall, samt 
    lite bättre på att skapa egna klasser. Denna vecka har jag inte haft några problem med "->" istället 
    för "." mellan objekt och metod/attribut, så det är ett framsteg.</p>

    <h2 id="kmom04">kmom04</h2>
    <p>Detta kursmoment har handlat om att skapa enhetstester med PHPUnit. Jag tycker verktyget verkar väldigt bra och 
    lättanvänt. Att använda sig av det kändes även väldigt likt "unittest" vi använde oss av i objektorienterade 
    Python-kursen, vilket underlättade en del.</p>
    <p>Jag gjorde tester för mina klasser Card, CardGraphic, CardHand och DeckOfCards. Samtliga tester fick minst 97% kodtäckning 
    på "lines". På "functions and methods" fick alla tester 94% kodtäckning eller högre, förutom CardHand som fick 67% 
    (2/3 metoder). Jag är inte helt säker på varför det blev så lågt där för jag har gjort tester för alla 3 metoder. Jag satt 
    cirka en timme med att fixa den när jag märkte att den inte räknades, men jag lyckades inte så jag låter den vara.</p>
    <p>Jag tyckte min kod var ganska lätt att testa. Däremot hade jag säkert kunnat skriva om min kod för att göra den ännu 
    mer testbar. Jag ändrade inte min kod på något sätt.</p>
    <p>Jag tror absolut att testbar kod indikerar bra/snygg/ren kod. Det är väl inte helt avgörande, för det finns andra 
    saker att titta på också. Men om kod är lätt att testa, så är den troligtvis lätt att använda, vilket alltid är positivt. 
    En metod som är lätt att testa har ändå möjligheten att vara skriven på ett ineffektivt sätt, till exempel i form av 
    variabler med konstiga namn eller kod som inte är "DRY".</p>
    <p>Min TIL för detta kursmoment är hur lätt det är att generera dokumentation med PHPDoc både med och utan docblocks. 
    Jag har också lärt mig hur lätt det är att skapa simpla enhetstester med PHPUnit.</p>

    <h2 id="kmom05">kmom05</h2>
    <p>Detta kursmoment har handlat om att bygga upp en databas med hjälp av Doctrine och SQLite. Jag tyckte det var när 
    jag skulle komma i gång för jag trodde att man var tvungen att använda sig av MariaDB och jag var osäker på var jag 
    skulle titta för att förbereda det. Som tur var upptäckte jag efter ett tag att man inte behövde använda MariaDB, så 
    jag använde SQLite istället. Övningen var lätt att följa både med och utan videon.</p>
    <p>Jag tänkte en del på att skapa sidorna på ett sätt så att de känns sammanhängande och man lätt kan klicka sig runt. 
    Om man bortser från det fokuserade jag inte jättemycket på utseende, iallafall inte när det kommer till styling. Jag 
    stylade endast tabellerna jag använde för att visa upp information om böckerna.</p>
    <p>Jag tycker faktiskt om detta sätt att jobba med databas. Det var skönt att slippa skapa tabeller helt själv. Det 
    känns som att detta sätt passar bättre när man bara vill ha en simpel databas snabbt, som inte hanterar transaktioner 
    och mer avancerade funktioner. I vårt fall gjorde vi ju endast CRUD som jag skulle anse som simpla funktioner. Sen 
    misstänker jag att det även går att skapa mer avancerade saker också, vi har ju iallafall tittat lite fort på att 
    man kan bygga upp egna queries.</p>
    <p>Min uppfattning av ORM är att det är ett väldigt bra redskap som gör det smidigt om man gillar objektorienterad 
    programmering. Det var ganska skönt att inte ha massor sql-filer som vi hade i databas-kursen.</p>
    <p>Min TIL denna vecka är vad ORM är. Jag hade ingen aning att det finns program som fungerar som en mellanhand för 
    att kommunicera med en databas med objektorienterad programmering. Det är något jag gärna använder mer framöver.</p>

    <h2 id="kmom06">kmom06</h2>
    <p>Redovisningstext här..</p>

    <h2 id="kmom10">kmom10</h2>
    <p>Redovisningstext här..</p>
{% endblock %}